<?php
namespace zerist\create\prototype;

//baisc prototype
abstract class Shape {
    public $x;
    public $y;
    public $color;

    public function __construct()
    {
        $this->x = 0;
        $this->y = 0;
        $this->color = 'black';
    }

    public function construct(Shape $shape) : Shape
    {
        $this->__construct();
        $this->x = $shape->x;
        $this->y = $shape->y;
        $this->color = $shape->color;
        return $this;
    }

    abstract function clone() : Shape;
}

//concrete prototype
class Retangle extends Shape{
    public $width;
    public $height;

    public function construct(Shape $retangle) : Shape
    {
        parent::construct($retangle);
        $this->width = $retangle->width;
        $this->height = $retangle->height;
        return $this;
    }

    public function clone(): Shape
    {
        // TODO: Implement clone() method.
        $obj = new Retangle();
        $obj->construct($this);
        return $obj;
    }
}

class Circle extends Shape {
    public $radius;

    public function construct(Shape $shape): Shape
    {
        parent::construct($shape); // TODO: Change the autogenerated stub
        $this->radius = $shape->radius;
        return $this;
    }

    public function clone(): Shape
    {
        // TODO: Implement clone() method.
        $obj = new Circle();
        $obj->construct($this);
        return $obj;
    }
}

class Application {
    public $shapes = array();

    public function __construct()
    {
        $circle = new Circle();
        $circle->x = 10;
        $circle->y = 10;
        $circle->radius = 20;
        $this->shapes[] = $circle;

        $anCircle = $circle->clone();
        $this->shapes[] = $anCircle;

        $retangle = new Retangle();
        $retangle->width = 10;
        $retangle->height = 20;
        $this->shapes[] = $retangle;
    }

    public function businessLogic(){
        $shapesCopy = array($this->shapes);
        foreach ($this->shapes as $val){
            $shapesCopy[] = $val->clone();
        }
    }
}